An example of the registration is in "semanticRegister".
The point clouds must be in csv form, and contain intensity. Intensity is only necessary for reading the files, the code can be modified. 
The semantic should be separate from the point clouds, one file per cloud, one line per point.
example:

   semanticRegister --pointclouds ./pointclouds/pointcloud_{00..99}.csv --sem1 ./semantics/semantic_{00..99}.csv

To not keep track of the final transform, and only display the relative between the clouds (Td instead of T, if T=T*Td), add the parameter --nc

Modifying:
	The class for simple matching is the NDTMatch_SE.
	All the parameters are provided in the initialization.
	NDTMatch_SE matcher ({1,2,0.5},{0,1,0,2},{100,100,100},{'*','>'},{0,3},0.01,52);
	This line, defines a matcher with resolutions 1,2,0.5 meters, applied in the order 0,1,0,2. So the final order
	of resolutions that are applied is 1,2,1,0.5.
	The size of the point cloud/map is defined as 100x100x100 meters.
	For the semantics, there are two categories in the example, '*','>' with parameters 0,3. 
	Other options: '<','>','e','u',1,2,3,0.
	'<' symbolizes a semantic category that the points belong to if the measure value is less than a constant.
	'>' symbolizes a semantic category that the points belong to if the measure value is more than a constant.
	'e' or '=' symbolizes a semantic category that the points belong to if the measure value is equal to a constant.
	'u' (unique) symbolizes that every different value of the semantic gets assigned a different category.
	1  use the lower tail of the distribution as a category.
	2  use the upper tail of the distribution as a category.
	3  use upper and lower tail of the distribution as categories.
	0  completely ignore this semantic.
	'*' symbolizes all points that dont belong in any semantic. If the option exists, those points are assigned to a separate category. Otherwise they are discarded.



